import java.util.*;
public class DepthFirstSearch {
	static int nodes;
	static int[] array;
	static int edges;
	static Map<Integer , LinkedList<Integer>> graph;
	static boolean[] visited;
	static int counter;
	static int components;
  
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
	    nodes = sc.nextInt();
	    edges = sc.nextInt();
		graph = new HashMap<>();
	//reading values
		visited = new boolean[nodes+1];
		array = new int[nodes+1];
		counter = nodes;
		for(int i = 1; i <= nodes; i++) {
			LinkedList <Integer> temp = new LinkedList<>();
			graph.put(i,temp);
		}
		for(int i = 0; i < edges; i++) {
			int x = sc.nextInt();
			int y = sc.nextInt();
			graph.get(x).add(y);
			graph.get(y).add(x);
		}
		int components = 0;
		for(int v = 1; v<=nodes; v++) {
			if(!visited[v]) { 
				components ++;
				dfs(v);
			}
		}
		for(int k : array) {
			System.out.println(k);
		}

		
	}
	
	public static void dfs(int u){
		LinkedList<Integer> temp = graph.get(u);
		if(temp== null) return;
		if(visited[u]) return;
		for(int v : temp) {
			if(!visited[v]) {
				visited[v] = true;
				array[counter] = components;
				dfs(v);
			}
		}

	}
	
	
}
